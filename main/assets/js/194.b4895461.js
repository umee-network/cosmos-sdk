(window.webpackJsonp=window.webpackJsonp||[]).push([[194],{839:function(e,t,a){"use strict";a.r(t);var o=a(1),r=Object(o.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"begin-block"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#begin-block"}},[e._v("#")]),e._v(" Begin Block")]),e._v(" "),a("p",[e._v("At each "),a("code",[e._v("BeginBlock")]),e._v(", all fees received in the previous block are transferred to\nthe distribution "),a("code",[e._v("ModuleAccount")]),e._v(" account. When a delegator or validator\nwithdraws their rewards, they are taken out of the "),a("code",[e._v("ModuleAccount")]),e._v(". During begin\nblock, the different claims on the fees collected are updated as follows:")]),e._v(" "),a("ul",[a("li",[e._v("The reserve community tax is charged.")]),e._v(" "),a("li",[e._v("The remainder is distributed proportionally by voting power to all bonded validators")])]),e._v(" "),a("h2",{attrs:{id:"the-distribution-scheme"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-distribution-scheme"}},[e._v("#")]),e._v(" The Distribution Scheme")]),e._v(" "),a("p",[e._v("See "),a("RouterLink",{attrs:{to:"/modules/distribution/07_params.html"}},[e._v("params")]),e._v(" for description of parameters.")],1),e._v(" "),a("p",[e._v("Let "),a("code",[e._v("fees")]),e._v(" be the total fees collected in the previous block, including\ninflationary rewards to the stake. All fees are collected in a specific module\naccount during the block. During "),a("code",[e._v("BeginBlock")]),e._v(", they are sent to the\n"),a("code",[e._v('"distribution"')]),e._v(" "),a("code",[e._v("ModuleAccount")]),e._v(". No other sending of tokens occurs. Instead, the\nrewards each account is entitled to are stored, and withdrawals can be triggered\nthrough the messages "),a("code",[e._v("FundCommunityPool")]),e._v(", "),a("code",[e._v("WithdrawValidatorCommission")]),e._v(" and\n"),a("code",[e._v("WithdrawDelegatorReward")]),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"reward-to-the-community-pool"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reward-to-the-community-pool"}},[e._v("#")]),e._v(" Reward to the Community Pool")]),e._v(" "),a("p",[e._v("The community pool gets "),a("code",[e._v("community_tax * fees")]),e._v(", plus any remaining dust after\nvalidators get their rewards that are always rounded down to the nearest\ninteger value.")]),e._v(" "),a("h3",{attrs:{id:"reward-to-the-validators"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reward-to-the-validators"}},[e._v("#")]),e._v(" Reward To the Validators")]),e._v(" "),a("p",[e._v("The proposer receives no extra rewards. All fees are distributed among all the\nbonded validators, including the proposer, in proportion to their consensus power.")]),e._v(" "),a("tm-code-block",{staticClass:"codeblock",attrs:{language:"text",base64:"cG93RnJhYyA9IHZhbGlkYXRvciBwb3dlciAvIHRvdGFsIGJvbmRlZCB2YWxpZGF0b3IgcG93ZXIKdm90ZU11bCA9IDEgLSBjb21tdW5pdHlfdGF4Cg=="}}),e._v(" "),a("p",[e._v("All validators receive "),a("code",[e._v("fees * voteMul * powFrac")]),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"rewards-to-delegators"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rewards-to-delegators"}},[e._v("#")]),e._v(" Rewards to Delegators")]),e._v(" "),a("p",[e._v("Each validator's rewards are distributed to its delegators. The validator also\nhas a self-delegation that is treated like a regular delegation in\ndistribution calculations.")]),e._v(" "),a("p",[e._v("The validator sets a commission rate. The commission rate is flexible, but each\nvalidator sets a maximum rate and a maximum daily increase. These maximums cannot be exceeded and protect delegators from sudden increases of validator commission rates to prevent validators from taking all of the rewards.")]),e._v(" "),a("p",[e._v("The outstanding rewards that the operator is entitled to are stored in\n"),a("code",[e._v("ValidatorAccumulatedCommission")]),e._v(", while the rewards the delegators are entitled\nto are stored in "),a("code",[e._v("ValidatorCurrentRewards")]),e._v(". The "),a("RouterLink",{attrs:{to:"/modules/distribution/01_concepts.html"}},[e._v("F1 fee distribution\nscheme")]),e._v(" is used to calculate the rewards per delegator as they\nwithdraw or update their delegation, and is thus not handled in "),a("code",[e._v("BeginBlock")]),e._v(".")],1),e._v(" "),a("h3",{attrs:{id:"example-distribution"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-distribution"}},[e._v("#")]),e._v(" Example Distribution")]),e._v(" "),a("p",[e._v("For this example distribution, the underlying consensus engine selects block proposers in\nproportion to their power relative to the entire bonded power.")]),e._v(" "),a("p",[e._v("All validators are equally performant at including pre-commits in their proposed\nblocks. Then hold "),a("code",[e._v("(pre_commits included) / (total bonded validator power)")]),e._v("\nconstant so that the amortized block reward for the validator is "),a("code",[e._v("( validator power / total bonded power) * (1 - community tax rate)")]),e._v(" of\nthe total rewards. Consequently, the reward for a single delegator is:")]),e._v(" "),a("tm-code-block",{staticClass:"codeblock",attrs:{language:"text",base64:"KGRlbGVnYXRvciBwcm9wb3J0aW9uIG9mIHRoZSB2YWxpZGF0b3IgcG93ZXIgLyB2YWxpZGF0b3IgcG93ZXIpICogKHZhbGlkYXRvciBwb3dlciAvIHRvdGFsIGJvbmRlZCBwb3dlcikKICAqICgxIC0gY29tbXVuaXR5IHRheCByYXRlKSAqICgxIC0gdmFsaWRhdG9yIGNvbW1pc3Npb24gcmF0ZSkKPSAoZGVsZWdhdG9yIHByb3BvcnRpb24gb2YgdGhlIHZhbGlkYXRvciBwb3dlciAvIHRvdGFsIGJvbmRlZCBwb3dlcikgKiAoMSAtCmNvbW11bml0eSB0YXggcmF0ZSkgKiAoMSAtIHZhbGlkYXRvciBjb21taXNzaW9uIHJhdGUpCg=="}})],1)}),[],!1,null,null,null);t.default=r.exports}}]);